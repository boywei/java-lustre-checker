--benchmark generated from spear that exercises errors with z3 4.8.9
node initially(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal -> true);

tel;

node historically(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal and (true -> (pre holds)));

tel;

node once(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal or (false -> (pre holds)));

tel;

node since(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b or (a and (false -> (pre holds))));

tel;

node triggers(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b and (a or (false -> (pre holds))));

tel;

node responds(
  a : bool;
  b : bool;
  n : int
) returns (
  holds : bool
);
var
  latch : int;
  i : int;
  pre_state : int;
  state : int;
let
  latch = (n -> (pre latch));

  pre_state = (0 -> (pre state));

  state = (if (pre_state = 0) then (if ((not b) or (a and b)) then 0 else 1) else (if (pre_state = 1) then (if ((not a) and (i < latch)) then 1 else (if (a and b) then 1 else (if ((not a) and (i >= latch)) then 2 else 0))) else 2));

  i = (if (pre_state = 0) then 0 else (if (pre_state = 1) then (if (not a) then ((pre i) + 1) else (if (a and b) then 0 else (pre i))) else (pre i)));

  holds = ((state = 0) or (state = 1));

tel;

node precedes(
  a : bool;
  b : bool
) returns (
  holds : bool
);
var
  state : int;
  pre_state : int;
let
  pre_state = (0 -> (pre state));

  state = (if (pre_state = 0) then (if ((a and b) or ((not a) and (not b))) then 0 else (if (a and (not b)) then 1 else 2)) else (if (pre_state = 1) then (if b then 0 else 1) else 2));

  holds = ((state = 0) or (state = 1));

tel;

node count(
  a : bool
) returns (
  c : int
);
let
  c = ((0 -> (pre c)) + (if a then 1 else 0));

tel;

node ccount(
  a : bool
) returns (
  c : int
);
let
  c = (if a then ((0 -> (pre c)) + 1) else 0);

tel;

node btoi(
  a : bool
) returns (
  c : int
);
let
  c = (if a then 1 else 0);

tel;

node fmod(
  a : real;
  b : real
) returns (
  x : real
);
let
  x = (a - (b * real(floor((a / b)))));

tel;

node USER_fmod_tests(
  USER_a : int;
  USER_b : real;
  USER_c : real;
  USER_x : real;
  USER_y : int;
  USER_z : real
) returns (
  constraints : bool
);
var
  USER_r0 : bool;
  USER_r1 : bool;
  USER_r2 : bool;
  USER_p0 : bool;
  USER_p1 : bool;
  counter : int;
let
  --%MAIN;
  counter = (1 -> ((pre counter) + 1));

  USER_r0 = (USER_x = real(USER_a));

  USER_r1 = (USER_y = floor(USER_b));

  USER_r2 = (USER_z = fmod(USER_c, 25.200000234321));

  USER_p0 = (constraints => (USER_b >= real(USER_y)));

  USER_p1 = (constraints => (not (USER_z > 25.0)));

  constraints = historically((USER_r0 and (USER_r1 and USER_r2)));

  --%PROPERTY constraints;

  --%REALIZABLE USER_a, USER_b, USER_c;

tel;
