--benchmark to exercise Jkind issue #58

node bool2int(input : bool) returns (output : int);

let
  output = if input then 1 else 0;
tel;


node main(act_t0, act_t1, act_t2, act_t3, act_t4, act_t5, act_t6, act_t7, act_t8, act_t9 : bool)

returns (p0, p1, p10, p11, p12, p2, p3, p4, p5, p6, p7, p8, p9 : int; f_t0, f_t1, f_t2, f_t3, f_t4, f_t5, f_t6, f_t7, f_t8, f_t9 : bool);

var
d : int;
trans_set0, trans_set1, trans_set2, trans_set3, trans_set4, trans_set5 : bool;
fd_t0, fd_t1, fd_t2, fd_t3, fd_t4, fd_t5, fd_t6, fd_t7, fd_t8, fd_t9 : bool;
prop : bool;
let
trans_set0 = act_t0 or act_t1 or act_t2;
trans_set1 = act_t3;
trans_set2 = act_t4;
trans_set3 = act_t5 or act_t6 or act_t7;
trans_set4 = act_t8;
trans_set5 = act_t9;
assert (bool2int(trans_set0) + bool2int(trans_set1) + bool2int(trans_set2) + bool2int(trans_set3) + bool2int(trans_set4) + bool2int(trans_set5) = 1);

assert (true and ((true
    and p12 >= 94
    and p4 >= 6
) or not act_t0)
and ((true
    and p0 >= 1
    and p2 >= 1
    and p4 >= 1
    and p6 >= 1
) or not act_t1)
and ((true
    and p1 >= 1
    and p6 >= 1
) or not act_t2)
and ((true
    and p3 >= 100
) or not act_t3)
and ((true
    and p11 >= 1
) or not act_t4)
and ((true
    and p12 >= 94
    and p3 >= 94
) or not act_t5)
and ((true
    and p10 >= 1
    and p12 >= 1
    and p5 >= 1
    and p8 >= 1
) or not act_t6)
and ((true
    and p12 >= 1
    and p7 >= 1
) or not act_t7)
and ((true
    and p9 >= 100
) or not act_t8)
and ((true
    and p5 >= 1
) or not act_t9)
);
d = 0 -> if not (f_t0 or f_t1 or f_t2 or f_t3 or f_t4 or f_t5 or f_t6 or f_t7 or f_t8 or f_t9) then 1 else pre d;
p1 = 0 -> if pre f_t2 then pre p1 - 1
  else if pre f_t1 then pre p1 + 1
  else  pre p1;



p12 = 0 -> if pre f_t0 then pre p12 - 94
  else if pre f_t5 then pre p12 - 94
  else if pre f_t6 then pre p12 - 1
  else if pre f_t7 then pre p12 - 1
  else if pre f_t2 then pre p12 + 1
  else if pre f_t6 then pre p12 + 1
  else  pre p12;



p3 = 0 -> if pre f_t3 then pre p3 - 100
  else if pre f_t5 then pre p3 - 94
  else if pre f_t0 then pre p3 + 6
  else if pre f_t2 then pre p3 + 1
  else  pre p3;



p5 = 0 -> if pre f_t6 then pre p5 - 1
  else if pre f_t9 then pre p5 - 1
  else if pre f_t4 then pre p5 + 1
  else if pre f_t6 then pre p5 + 1
  else  pre p5;



p7 = 0 -> if pre f_t7 then pre p7 - 1
  else if pre f_t6 then pre p7 + 1
  else  pre p7;



p0 = 1 -> if pre f_t1 then pre p0 - 1
  else if pre f_t1 then pre p0 + 1
  else  pre p0;



p11 = 1 -> if pre f_t4 then pre p11 - 1
  else if pre f_t9 then pre p11 + 1
  else  pre p11;



p2 = 1 -> if pre f_t1 then pre p2 - 1
  else if pre f_t2 then pre p2 + 1
  else  pre p2;



p8 = 1 -> if pre f_t6 then pre p8 - 1
  else if pre f_t7 then pre p8 + 1
  else  pre p8;



p10 = 3 -> if pre f_t6 then pre p10 - 1
  else if pre f_t8 then pre p10 + 100
  else  pre p10;



p6 = 94 -> if pre f_t1 then pre p6 - 1
  else if pre f_t2 then pre p6 - 1
  else if pre f_t0 then pre p6 + 94
  else if pre f_t1 then pre p6 + 1
  else if pre f_t5 then pre p6 + 94
  else if pre f_t7 then pre p6 + 1
  else  pre p6;



p9 = 97 -> if pre f_t8 then pre p9 - 100
  else if pre f_t7 then pre p9 + 1
  else  pre p9;



p4 = 100 -> if pre f_t0 then pre p4 - 6
  else if pre f_t1 then pre p4 - 1
  else if pre f_t3 then pre p4 + 100
  else if pre f_t5 then pre p4 + 94
  else  pre p4;


f_t0 = act_t0
    and p12 >= 94
    and p4 >= 6;


f_t1 = act_t1
    and p0 >= 1
    and p2 >= 1
    and p4 >= 1
    and p6 >= 1;


f_t2 = act_t2
    and p1 >= 1
    and p6 >= 1;


f_t3 = act_t3
    and p3 >= 100;


f_t4 = act_t4
    and p11 >= 1;


f_t5 = act_t5
    and p12 >= 94
    and p3 >= 94;


f_t6 = act_t6
    and p10 >= 1
    and p12 >= 1
    and p5 >= 1
    and p8 >= 1;


f_t7 = act_t7
    and p12 >= 1
    and p7 >= 1;


f_t8 = act_t8
    and p9 >= 100;


f_t9 = act_t9
    and p5 >= 1;


fd_t0 = false -> if f_t0 then true else pre fd_t0;
fd_t1 = false -> if f_t1 then true else pre fd_t1;
fd_t2 = false -> if f_t2 then true else pre fd_t2;
fd_t3 = false -> if f_t3 then true else pre fd_t3;
fd_t4 = false -> if f_t4 then true else pre fd_t4;
fd_t5 = false -> if f_t5 then true else pre fd_t5;
fd_t6 = false -> if f_t6 then true else pre fd_t6;
fd_t7 = false -> if f_t7 then true else pre fd_t7;
fd_t8 = false -> if f_t8 then true else pre fd_t8;
fd_t9 = false -> if f_t9 then true else pre fd_t9;

assert(not (false -> pre fd_t0) or fd_t0 and not (false -> pre fd_t1) or fd_t1 and not (false -> pre fd_t2) or fd_t2 and not (false -> pre fd_t3) or fd_t3 and not (false -> pre fd_t4) or fd_t4 and not (false -> pre fd_t5) or fd_t5 and not (false -> pre fd_t6) or fd_t6 and not (false -> pre fd_t7) or fd_t7 and not (false -> pre fd_t8) or fd_t8 and not (false -> pre fd_t9) or fd_t9);

prop = bool2int(fd_t0) + bool2int(fd_t1) + bool2int(fd_t2) + bool2int(fd_t3) + bool2int(fd_t4) + bool2int(fd_t5) + bool2int(fd_t6) + bool2int(fd_t7) + bool2int(fd_t8) + bool2int(fd_t9) < 10;
assert (p0 >= 0 and p1 >= 0 and p10 >= 0 and p11 >= 0 and p12 >= 0 and p2 >= 0 and p3 >= 0 and p4 >= 0 and p5 >= 0 and p6 >= 0 and p7 >= 0 and p8 >= 0 and p9 >= 0);
--%PROPERTY prop;

tel;
