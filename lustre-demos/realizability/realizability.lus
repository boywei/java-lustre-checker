--benchmark generated from spear that exercises error with z3 4.8.9

type USER_mode_type = enum {USER_SETUP, USER_COOKING, USER_SUSPENDED};

node initially(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal -> true);

tel;

node historically(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal and (true -> (pre holds)));

tel;

node once(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal or (false -> (pre holds)));

tel;

node since(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b or (a and (false -> (pre holds))));

tel;

node triggers(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b and (a or (false -> (pre holds))));

tel;

node responds(
  a : bool;
  b : bool;
  n : int
) returns (
  holds : bool
);
var
  latch : int;
  i : int;
  pre_state : int;
  state : int;
let
  latch = (n -> (pre latch));

  pre_state = (0 -> (pre state));

  state = (if (pre_state = 0) then (if ((not b) or (a and b)) then 0 else 1) else (if (pre_state = 1) then (if ((not a) and (i < latch)) then 1 else (if (a and b) then 1 else (if ((not a) and (i >= latch)) then 2 else 0))) else 2));

  i = (if (pre_state = 0) then 0 else (if (pre_state = 1) then (if (not a) then ((pre i) + 1) else (if (a and b) then 0 else (pre i))) else (pre i)));

  holds = ((state = 0) or (state = 1));

tel;

node precedes(
  a : bool;
  b : bool
) returns (
  holds : bool
);
var
  state : int;
  pre_state : int;
let
  pre_state = (0 -> (pre state));

  state = (if (pre_state = 0) then (if ((a and b) or ((not a) and (not b))) then 0 else (if (a and (not b)) then 1 else 2)) else (if (pre_state = 1) then (if b then 0 else 1) else 2));

  holds = ((state = 0) or (state = 1));

tel;

node count(
  a : bool
) returns (
  c : int
);
let
  c = ((0 -> (pre c)) + (if a then 1 else 0));

tel;

node ccount(
  a : bool
) returns (
  c : int
);
let
  c = (if a then ((0 -> (pre c)) + 1) else 0);

tel;

node btoi(
  a : bool
) returns (
  c : int
);
let
  c = (if a then 1 else 0);

tel;

node USER_mode_logic(
  USER_clear : bool;
  USER_start : bool;
  USER_door_closed : bool;
  USER_seconds_to_cook : int;
  USER_microwave_mode : USER_mode_type;
  USER_seconds_remaining : int
) returns (
  constraints : bool
);
var
  USER_pre_mode : USER_mode_type;
  USER_pre_mode_is_setup : bool;
  USER_pre_mode_is_cooking : bool;
  USER_pre_mode_is_suspended : bool;
  USER_seconds_to_cook_positive : bool;
  USER_seconds_remaining_positive : bool;
  USER_pre_seconds_remaining : int;
  USER_a0 : bool;
  USER_r1 : bool;
  USER_r2 : bool;
  USER_r3 : bool;
  USER_r4 : bool;
  USER_r5 : bool;
  USER_r6 : bool;
  USER_r7 : bool;
  USER_r8 : bool;
  USER_r9 : bool;
  USER_r10 : bool;
  USER_p1 : bool;
  USER_p2 : bool;
  USER_p3 : bool;
  USER_p4 : bool;
  counter : int;
let
  --%MAIN;
  counter = (1 -> ((pre counter) + 1));

  USER_pre_mode = (USER_SETUP -> (pre USER_microwave_mode));

  USER_pre_mode_is_setup = (USER_pre_mode = USER_SETUP);

  USER_pre_mode_is_cooking = (USER_pre_mode = USER_COOKING);

  USER_pre_mode_is_suspended = (USER_pre_mode = USER_SUSPENDED);

  USER_seconds_to_cook_positive = (USER_seconds_to_cook > 0);

  USER_seconds_remaining_positive = (USER_seconds_remaining > 0);

  USER_pre_seconds_remaining = (0 -> (pre USER_seconds_remaining));

  USER_a0 = (USER_seconds_to_cook >= 1);

  USER_r1 = (if (USER_microwave_mode = USER_SETUP) then (USER_seconds_remaining = USER_seconds_to_cook) else (if (USER_microwave_mode = USER_SUSPENDED) then (USER_seconds_remaining = USER_pre_seconds_remaining) else (USER_seconds_remaining = (USER_pre_seconds_remaining - 1))));

  USER_r2 = ((USER_pre_mode_is_setup and (((not USER_start) or USER_clear) or (not USER_seconds_to_cook_positive))) => (USER_microwave_mode = USER_SETUP));

  USER_r3 = (((USER_pre_mode_is_setup and ((USER_start and (not USER_clear)) and USER_door_closed)) and USER_seconds_to_cook_positive) => (USER_microwave_mode = USER_COOKING));

  USER_r4 = (((USER_pre_mode_is_setup and ((USER_start and (not USER_clear)) and (not USER_door_closed))) and USER_seconds_to_cook_positive) => (USER_microwave_mode = USER_SUSPENDED));

  USER_r5 = ((USER_pre_mode_is_cooking and (not USER_seconds_remaining_positive)) => (USER_microwave_mode = USER_SETUP));

  USER_r6 = ((USER_pre_mode_is_cooking and ((not USER_door_closed) or USER_clear)) => (USER_microwave_mode = USER_SUSPENDED));

  USER_r7 = ((USER_pre_mode_is_cooking and ((USER_door_closed and (not USER_clear)) and USER_seconds_to_cook_positive)) => (USER_microwave_mode = USER_COOKING));

  USER_r8 = ((USER_pre_mode_is_suspended and ((not USER_door_closed) and (not USER_clear))) => (USER_microwave_mode = USER_SUSPENDED));

  USER_r9 = ((USER_pre_mode_is_suspended and ((USER_door_closed and USER_start) and (not USER_clear))) => (USER_microwave_mode = USER_COOKING));

  USER_r10 = ((USER_pre_mode_is_suspended and USER_clear) => (USER_microwave_mode = USER_SETUP));

  USER_p1 = (constraints => ((USER_microwave_mode = USER_COOKING) => USER_door_closed));

  USER_p2 = (constraints => ((USER_microwave_mode = USER_COOKING) => (USER_seconds_remaining < USER_pre_seconds_remaining)));

  USER_p3 = (constraints => ((USER_microwave_mode = USER_SUSPENDED) => (USER_seconds_remaining = USER_pre_seconds_remaining)));

  USER_p4 = (constraints => ((not once(USER_start)) => (USER_microwave_mode = USER_SETUP)));

  constraints = historically((USER_r1 and (USER_r2 and (USER_r3 and (USER_r4 and (USER_r5 and (USER_r6 and (USER_r7 and (USER_r8 and (USER_r9 and USER_r10))))))))));

  assert USER_a0;

  --%PROPERTY constraints;

  --%REALIZABLE USER_clear, USER_start, USER_door_closed, USER_seconds_to_cook;

tel;
